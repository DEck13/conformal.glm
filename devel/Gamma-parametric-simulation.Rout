
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> library(parallel)
> library(MASS)
> library(statmod)
> library(conformal.glm)
> 
> 
> alpha <- 0.10
> n <- 200
> shape <- 2
> beta <- c(1/4, 2)
> 
> set.seed(13)
> x <- matrix(runif(n), ncol = 1)
> rate <- cbind(1, x) %*% beta * shape
> y <- rgamma(n = n, shape = shape, rate = rate)
> data <- data.frame(y = y, x = x)
> colnames(data)[2] <- c("x1")
> 
> fit = glm(y ~ x1, family = Gamma, data = data) 
> cpred <- conformal.glm(fit, nonparametric = TRUE, 
+ 	bins = 3, cores = 6)
> paraCI <- cpred$paraconformal
> 
> 
> 
> ## Monte Carlo coverage 
> montecarlo <- function(n, bins, beta = beta, shape = shape){
+ 	p <- length(beta) - 1
+   x <- matrix(runif(n), ncol = p)
+   rate <- cbind(1, x) %*% beta * shape
+   y <- rgamma(n = n, shape = shape, rate = rate)
+   data <- data.frame(y = y, x = x)
+   colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+ 
+   fit = glm(y ~ ., family = Gamma, data = data) 
+   cpred <- conformal.glm(fit, nonparametric = FALSE, 
+ 	  bins = bins, cores = 6)
+   paraCI <- cpred$paraconformal
+   nonparaCI <- cpred$nonparaconformal
+ 
+   formula <- fit$formula
+   newdata <- data
+   respname <- all.vars(formula)[1]
+   newdata <- newdata[, !(colnames(data) %in% respname)]
+   newdata <- as.matrix(newdata)
+ 
+   ## local coverage for parametric conformal prediction region
+   local.para <- local.coverage(region = cbind(newdata, paraCI), 
+   	data = data, newdata = newdata, k = p, bins = bins, at.data = "TRUE")
+   c(local.para, mean(apply(paraCI, 1, diff)))
+ 
+ }
> 
> 
> 
> 
> 
> 
> ## n = 200, bins = 3
> B <- 25
> n <- 200
> bins <- 3
> system.time(mat200.3 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
   user  system elapsed 
935.299   3.632 173.920 
> apply(mat200.3, 2, mean)
[1] 0.9211047 0.9204052 0.9208712 2.2853097
> apply(mat200.3, 2, sd)
[1] 0.005635971 0.006981639 0.005484141 0.200726335
> 
> ## n = 200, bins = 4
> B <- 25
> n <- 200
> bins <- 4
> system.time(mat200.4 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
   user  system elapsed 
863.348   3.697 160.057 
> apply(mat200.4, 2, mean)
[1] 0.9259261 0.9303851 0.9256266 0.9287280 2.4623190
> apply(mat200.4, 2, sd)
[1] 0.004958987 0.009867455 0.008855271 0.008132543 0.241482235
> 
> 
> 
> ## n = 500, bins = 4
> B <- 25
> n <- 500
> bins <- 4
> system.time(mat500.4 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
    user   system  elapsed 
4497.278    3.445  829.812 
> apply(mat500.4, 2, mean)
[1] 0.9123017 0.9117198 0.9109813 0.9102182 2.1656540
> apply(mat500.4, 2, sd)
[1] 0.003425923 0.003443547 0.003352646 0.003163810 0.122506768
> 
> ## n = 500, bins = 6
> B <- 25
> n <- 500
> bins <- 6
> system.time(mat500.6 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
    user   system  elapsed 
4369.025    3.684  806.056 
> apply(mat500.6, 2, mean)
[1] 0.9163873 0.9147344 0.9146875 0.9154143 0.9152714 0.9150811 2.3003195
> apply(mat500.6, 2, sd)
[1] 0.003926396 0.004074053 0.004333483 0.005917569 0.007393806 0.004988489
[7] 0.142065343
> 
> 
> 
> ## n = 1000, bins = 6
> B <- 25
> n <- 1000
> bins <- 6
> system.time(mat1000.6 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
     user    system   elapsed 
15916.325     3.918  2933.298 
> apply(mat1000.6, 2, mean)
[1] 0.9081755 0.9080444 0.9084045 0.9083195 0.9072467 0.9075032 2.1794606
> apply(mat1000.6, 2, sd)
[1] 0.002996721 0.001790451 0.003142337 0.002691690 0.003730737 0.002362302
[7] 0.081827966
> 
> ## n = 1000, bins = 8
> B <- 25
> n <- 1000
> bins <- 8
> system.time(mat1000.8 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
     user    system   elapsed 
15189.038     3.936  2797.332 
> apply(mat1000.8, 2, mean)
[1] 0.9128683 0.9093591 0.9097872 0.9109624 0.9100378 0.9109256 0.9106862
[8] 0.9106035 2.2131428
> apply(mat1000.8, 2, sd)
[1] 0.003078588 0.004210905 0.002961161 0.002292456 0.002691565 0.003318034
[7] 0.002863116 0.002961932 0.083539707
> 
> 
> 
> ## n = 2000, bins = 8
> B <- 25
> n <- 2000
> bins <- 8
> system.time(mat2000.8 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
     user    system   elapsed 
75738.003     5.605 13832.130 
> apply(mat2000.8, 2, mean)
[1] 0.9050450 0.9054546 0.9047238 0.9054333 0.9050250 0.9058874 0.9046476
[8] 0.9049742 2.1516577
> apply(mat2000.8, 2, sd)
[1] 0.001115133 0.001143582 0.001812879 0.001225818 0.001811130 0.001209055
[7] 0.002021092 0.001894447 0.073732306
> 
> ## n = 2000, bins = 10
> B <- 25
> n <- 2000
> bins <- 10
> system.time(mat2000.10 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
     user    system   elapsed 
67022.821     4.783 12184.903 
> apply(mat2000.10, 2, mean)
 [1] 0.9064752 0.9059392 0.9064189 0.9061981 0.9064470 0.9063630 0.9066404
 [8] 0.9063003 0.9061666 0.9058600 2.1867135
> apply(mat2000.10, 2, sd)
 [1] 0.001531401 0.002163130 0.001837370 0.002236402 0.002054295 0.001635457
 [7] 0.002424223 0.001654692 0.002001488 0.002067977 0.054778157
> 
> ## n = 2000, bins = 12
> B <- 25
> n <- 2000
> bins <- 12
> system.time(mat2000.12 <- matrix(unlist(lapply(1:B, 
+ 	FUN = function(j) montecarlo(n = n, bins = bins, beta = beta, shape = shape))), 
+   byrow = T, nrow = B))
    user   system  elapsed 
62770.31     4.85 11390.87 
> apply(mat2000.12, 2, mean)
 [1] 0.9081766 0.9072382 0.9082215 0.9084329 0.9080869 0.9080687 0.9076731
 [8] 0.9064187 0.9065763 0.9073415 0.9080027 0.9067540 2.1897214
> apply(mat2000.12, 2, sd)
 [1] 0.002136533 0.001825625 0.001729550 0.002529002 0.001797259 0.002239642
 [7] 0.001810162 0.002836246 0.003364658 0.002513223 0.002333426 0.002742542
[13] 0.083131284
> 
> 
> 
> 
> file <- paste("Gamma-parametric-simulation", collapse = "")
> file <- paste(file, "RData", sep = ".", collapse = "")
> save.image(file = file, ascii = TRUE)
> 
> 
> 
> proc.time()
      user     system    elapsed 
247359.070     38.338  45120.618 
