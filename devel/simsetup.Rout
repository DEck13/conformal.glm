
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> library(parallel)
> library(MASS)
> library(statmod)
> library(conformal.glm)
> library(conformalInference)
> library(HDInterval)
> 
> 
> 
> ## Monte Carlo coverage 
> simulator <- function(n, alpha, beta, bins = NULL, family = "Gamma", 
+   link = "inverse", shape = NULL, sd = NULL, confamily = "Gamma",
+   parametric = TRUE, nonparametric = FALSE, 
+   LS = FALSE, HD = FALSE, cores = 6){
+ 
+ 	p <- k <- length(beta) - 1
+   x <- matrix(runif(n), ncol = p)
+   y <- rep(0,n)
+   data <- NULL
+ 
+   ## set up partition
+   wn <- min(1/ floor(1 / (log(n)/n)^(1/(k+3))), 1/2)
+   if(class(bins) == "NULL") bins <- 1 / wn
+ 
+ 
+   if(family == "Gamma"){
+     if(link == "identity"){
+       rate <- 1 / (cbind(1, x) %*% beta) * shape
+       y <- rgamma(n = n, shape = shape, rate = rate)
+       data <- data.frame(y = y, x = x)
+       colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+     }
+     if(link == "inverse"){
+       rate <- cbind(1, x) %*% beta * shape
+       y <- rgamma(n = n, shape = shape, rate = rate)
+       data <- data.frame(y = y, x = x)
+       colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+     }
+     if(link == "log"){
+       rate <- (1 / exp(cbind(1, x) %*% beta)) * shape
+       y <- rgamma(n = n, shape = shape, rate = rate)
+       data <- data.frame(y = y, x = x)
+       colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+     }
+   }
+ 
+   if(family == "gaussian"){
+     mu <- cbind(1, x) %*% beta
+     y <- rnorm(n = n, mean = mu, sd = sd)
+     data <- data.frame(y = y, x = x)
+     colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+   }
+ 
+   if(family == "inverse.gaussian"){
+     mu = 1 / sqrt(cbind(1, x) %*% beta)
+     y <- rinvgauss(n = n, mean = mu)
+     data <- data.frame(y = y, x = x)
+     colnames(data)[2:(p+1)] <- paste("x", 1:p, sep = "")
+   }
+ 
+   fit = glm(y ~ ., family = confamily, data = data) 
+   formula <- fit$formula
+   newdata <- data
+   respname <- all.vars(formula)[1]
+   newdata <- newdata[, !(colnames(data) %in% respname)]
+   newdata <- as.matrix(newdata)
+ 
+   paraCI <- nonparaCI <- LSCI <- HDCI <- NULL
+   if(parametric){ 
+     cpred <- conformal.glm(fit, parametric = TRUE, 
+       nonparametric = FALSE, alpha = alpha,
+       bins = bins, cores = cores)
+     paraCI <- cpred$paraconformal
+   }
+   if(nonparametric){ 
+     cpred <- conformal.glm(fit, parametric = FALSE, 
+       nonparametric = TRUE, alpha = alpha,
+       bins = bins, cores = cores)
+     nonparaCI <- cpred$nonparaconformal
+   }
+   if(LS){
+     funs <- lm.funs(intercept = TRUE)
+     train.fun <- funs$train.fun
+     predict.fun <- funs$predict.fun
+     p1.tibs <- conformal.pred(x = x, y = y, x0 = newdata, 
+       train.fun = train.fun, predict.fun = predict.fun, 
+       alpha = alpha, grid.method = "linear",
+       num.grid.pts = 999)
+     LSCI <- cbind(p1.tibs$lo, p1.tibs$up)
+   }
+   if(HD){
+     if(confamily == "Gamma"){
+       betaMLE <- coefficients(fit)
+       shapeMLE <- as.numeric(gamma.shape(fit)[1])
+       rateMLE <- cbind(1, newdata) %*% betaMLE * shapeMLE
+       HDCI <- do.call(rbind, lapply(1:nrow(newdata), function(j){ 
+         hdi(qgamma, 1 - alpha, shape = shapeMLE, rate = rateMLE[j, 1])
+       }))
+     }
+     if(confamily == "gaussian"){
+       fit = lm(y ~ ., data = data)
+       betaMLE <- coefficients(fit)
+       sdMLE <- summary(fit)$sigma
+       meanMLE <- as.numeric(cbind(1, newdata) %*% betaMLE)
+       HDCI <- do.call(rbind, lapply(1:nrow(newdata), function(j){ 
+         hdi(qnorm, 1 - alpha, sd = sdMLE, mean = meanMLE[j])
+       }))
+     }
+     if(confamily == "inverse.gaussian"){
+       ## Blank for now
+     }
+ 
+   }
+ 
+   ## local coverage for prediction regions
+   output.parametric <- output.nonparametric <- 
+     output.LS <- output.HD <- rep(0, bins + 1)
+   if(parametric){
+     local.parametric <- local.coverage(region = paraCI, 
+   	  data = data, newdata = newdata, k = p, bins = bins, 
+       at.data = "TRUE")
+     output.parametric <- c(local.parametric, 
+       mean(apply(paraCI, 1, diff)))
+   }
+   if(nonparametric){
+     local.nonparametric <- local.coverage(region = nonparaCI, 
+       data = data, newdata = newdata, k = p, bins = bins, 
+       at.data = "TRUE")
+     output.nonparametric <- c(local.nonparametric, 
+       mean(apply(nonparaCI, 1, diff)))
+   }
+   if(LS){
+     local.LS <- local.coverage(region = LSCI, 
+       data = data, newdata = newdata, k = p, bins = bins, 
+       at.data = "TRUE")
+     output.LS <- c(local.LS, mean(apply(LSCI, 1, diff))) 
+   }
+   if(HD){
+     local.HD <- local.coverage(region = HDCI, 
+       data = data, newdata = newdata, k = p, bins = bins, 
+       at.data = "TRUE")
+     output.HD <- c(local.HD, mean(apply(HDCI, 1, diff))) 
+   }
+ 
+   output <- list(output.parametric = output.parametric, 
+     output.nonparametric = output.nonparametric,
+     output.LS = output.LS, 
+     output.HD = output.HD)
+   output
+ 
+ }
> 
> 
> 
> alpha <- 0.10
> shape <- 2
> beta <- c(1/8, 2)
> 
> 
> 
> ## n = 200, bins = 2
> B <- 50
> n <- 200
> bins <- 2
> system.time(gamgam200.2 <- do.call(rbind, lapply(1:B, 
+   FUN = function(j){
+     unlist(simulator(n = n, alpha = alpha, beta = beta, 
+       bins = bins, family = "Gamma", 
+       link = "inverse", shape = shape, sd = NULL, 
+       confamily = "Gamma",
+       parametric = TRUE, nonparametric = TRUE, 
+       LS = TRUE, HD = TRUE, cores = 6))
+   })))
Error in r[i1] - r[-length(r):-(length(r) - lag + 1L)] : 
  non-numeric argument to binary operator
Calls: system.time ... unlist -> simulator -> mean -> apply -> FUN -> diff.default
In addition: Warning message:
In mclapply(1:n.pred, mc.cores = cores, FUN = function(j) { :
  scheduled cores 4 encountered errors in user code, all values of the jobs will be affected
Timing stopped at: 2122 11.19 585.8
Execution halted
